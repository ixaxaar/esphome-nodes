esphome:
  name: xiao-air-quality
  friendly_name: XIAO Air Quality Monitor

# PARTICLE_PM1_0_STANDARD   0x05
# PARTICLE_PM2_5_STANDARD   0x07
# PARTICLE_PM10_STANDARD    0x09
# PARTICLE_PM1_0_ATMOSPHERE 0x0B
# PARTICLE_PM2_5_ATMOSPHERE 0x0D
# PARTICLE_PM10_ATMOSPHERE  0x0F
# PARTICLENUM_0_3_UM_EVERY0_1L_AIR 0x11
# PARTICLENUM_0_5_UM_EVERY0_1L_AIR 0x13
# PARTICLENUM_1_0_UM_EVERY0_1L_AIR 0x15
# PARTICLENUM_2_5_UM_EVERY0_1L_AIR 0x17
# PARTICLENUM_5_0_UM_EVERY0_1L_AIR 0x19
# PARTICLENUM_10_UM_EVERY0_1L_AIR  0x1B
# PARTICLENUM_GAIN_VERSION 0x1D

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  logs:
    i2c: DEBUG

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: !secret web_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "XIAO-PM2.5 Hotspot"
    password: !secret ap_password

# Sync time with NTP
time:
  - platform: sntp
    id: sntp_time
    timezone: "Asia/Kolkata"

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_password

# I2C configuration for XIAO ESP32S3
i2c:
  sda: GPIO5 # PIN_D4 (SDA)
  scl: GPIO6 # PIN_D5 (SCL)
  scan: true
  frequency: 50kHz
  id: bus_a

# Global variables to track sensor state
globals:
  - id: sensor_initialized
    type: bool
    restore_value: no
    initial_value: "false"

# Initialize sensor on boot
interval:
  - interval: 1s
    then:
      - lambda: |-
          if (!id(sensor_initialized)) {
            // Initialize the sensor once
            Wire.begin();
            delay(100);

            // Wake up the sensor
            Wire.beginTransmission(0x19);
            Wire.write(0x01);  // Mode register
            Wire.write(0x02);  // Wake command
            Wire.endTransmission();
            delay(100);

            id(sensor_initialized) = true;
            ESP_LOGD("air_quality", "Air Quality Sensor initialized");
          }

sensor:
  # PM1.0 Standard
  - platform: template
    name: "PM1.0 Standard"
    id: pm1_0_standard
    unit_of_measurement: "µg/m³"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    device_class: pm1
    lambda: |-
      // Read PM1.0 standard particle concentration
      Wire.beginTransmission(0x19);
      Wire.write(0x05);  // PARTICLE_PM1_0_STANDARD register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 30s

  # PM2.5 Standard
  - platform: template
    name: "PM2.5 Standard"
    id: pm2_5_standard
    unit_of_measurement: "µg/m³"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    device_class: pm25
    lambda: |-
      // Read PM2.5 standard particle concentration
      Wire.beginTransmission(0x19);
      Wire.write(0x07);  // PARTICLE_PM2_5_STANDARD register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 5s

  # PM10 Standard
  - platform: template
    name: "PM10 Standard"
    id: pm10_standard
    unit_of_measurement: "µg/m³"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    device_class: pm10
    lambda: |-
      // Read PM10 standard particle concentration
      Wire.beginTransmission(0x19);
      Wire.write(0x09);  // PARTICLE_PM10_STANDARD register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 30s

  # PM1.0 Atmospheric
  - platform: template
    name: "PM1.0 Atmospheric"
    id: pm1_0_atmosphere
    unit_of_measurement: "µg/m³"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    lambda: |-
      // Read PM1.0 atmospheric particle concentration
      Wire.beginTransmission(0x19);
      Wire.write(0x0B);  // PARTICLE_PM1_0_ATMOSPHERE register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 30s

  # PM2.5 Atmospheric
  - platform: template
    name: "PM2.5 Atmospheric"
    id: pm2_5_atmosphere
    unit_of_measurement: "µg/m³"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    lambda: |-
      // Read PM2.5 atmospheric particle concentration
      Wire.beginTransmission(0x19);
      Wire.write(0x0D);  // PARTICLE_PM2_5_ATMOSPHERE register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 30s

  # PM10 Atmospheric
  - platform: template
    name: "PM10 Atmospheric"
    id: pm10_atmosphere
    unit_of_measurement: "µg/m³"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    lambda: |-
      // Read PM10 atmospheric particle concentration
      Wire.beginTransmission(0x19);
      Wire.write(0x0F);  // PARTICLE_PM10_ATMOSPHERE register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 30s

  # Particle counts
  - platform: template
    name: "Particles >0.3µm"
    id: particles_0_3um
    unit_of_measurement: "/0.1L"
    icon: "mdi:chart-bubble"
    accuracy_decimals: 0
    lambda: |-
      Wire.beginTransmission(0x19);
      Wire.write(0x11);  // PARTICLENUM_0_3_UM_EVERY0_1L_AIR register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 60s

  - platform: template
    name: "Particles >0.5µm"
    id: particles_0_5um
    unit_of_measurement: "/0.1L"
    icon: "mdi:chart-bubble"
    accuracy_decimals: 0
    lambda: |-
      Wire.beginTransmission(0x19);
      Wire.write(0x13);  // PARTICLENUM_0_5_UM_EVERY0_1L_AIR register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 60s

  - platform: template
    name: "Particles >1.0µm"
    id: particles_1_0um
    unit_of_measurement: "/0.1L"
    icon: "mdi:chart-bubble"
    accuracy_decimals: 0
    lambda: |-
      Wire.beginTransmission(0x19);
      Wire.write(0x15);  // PARTICLENUM_1_0_UM_EVERY0_1L_AIR register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 60s

  - platform: template
    name: "Particles >2.5µm"
    id: particles_2_5um
    unit_of_measurement: "/0.1L"
    icon: "mdi:chart-bubble"
    accuracy_decimals: 0
    lambda: |-
      Wire.beginTransmission(0x19);
      Wire.write(0x17);  // PARTICLENUM_2_5_UM_EVERY0_1L_AIR register
      if (Wire.endTransmission() != 0) {
        return NAN;
      }

      Wire.requestFrom((uint8_t)0x19, (uint8_t)2);
      if (Wire.available() >= 2) {
        uint8_t high = Wire.read();
        uint8_t low = Wire.read();
        uint16_t value = ((uint16_t)high << 8) | low;
        return (float)value;
      }
      return NAN;
    update_interval: 60s

  # WiFi Signal Sensor
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

# Status LED
status_led:
  pin:
    number: GPIO21
    inverted: true
